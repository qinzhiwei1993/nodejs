一、 复习
    cookie:
        res中设置，req中读取的。第一次访问没有cookie。
        存储大小有限制。kv对。对用户可见的。用户可以禁用，或者是清楚cookie。可以被篡改。
        可以用来记录用户的一些信息，购买历史，猜你喜欢。。。
        Http是无状态的协议，所以两次访问，服务器不能意识到是同一个客户端，就要用cookie来巧妙的解决这个问题。
    session: 会话
        session就是利用cookie，实现的会话。就是第一次访问的时候，可以在服务器上为这个用户缓存一些信息。别的用户是不能看到这个信息的。
        服务器会下发一个秘钥，客户端每次访问都会携带这个秘钥。那么，服务器如果发现这个秘钥吻合，就能够返现用户曾经保存的信息。
            登录就是用session制作的。任何语言的session都是透明的，不会体验cookie机理。

二、加密
    永远不要用明码写密码。CSDN2015年就泄露用户密码了，并且泄露了明码。
    黑客拿到的是用户密码的加密信息，所以也没用。因为他没发翻译成为明码。

    MD5加密是函数型加密。就是每次加密的结果一定相同，没有随机位。
    特点： 不关加密的文字，多长多短，永远都是32位字母、数字混合。
           哪怕只改一个字，密文都会大变。
           MD5没有反函数破解的可能，网上的破解工具，都是通过字典的模式，通过大量的列出明-密对应的字典，找到明码。
                两次加密网上也有对应字典了，所以我们不要直接用一层MD5，这样独一黑客来说，和明码是一样的。
    MD5常用于作为版本的校验。可以比对两个软件、文件是否完全一致。


    //加密流程:
    node中自带了一个模块， crypto模块，负责加密。
    首先创建hash，然后update和digest
    var md5 = crypto.createHash('md5');
    var password = md5.update(fields.password).digest('base64');

三、图像处理  GraphicsMagick  http://www.graphicsmagick.org/
    windows安装地址 ftp://ftp.graphicsmagick.org/pub/GraphicsMagick/windows/
    linux安装： 通过brew进行安装   brew install graphicsmagick

    只要服务器需要处理图片，那么这个服务器就需要安装 GraphicsMagick软件。免费的。

    装完之后，可视化工具没用(这个软件提供了接口，可以用语言进行调用).从桌面上删除，把安装目录设置为全局变量。

    格式转换： gm convert a.png b.jpg  把a.png转为b.jpg
    API http://www.graphicsmagick.org/mogrify.html

    nodejs要使用graphicsmagick, 需要安装一个叫gm的包。  npm install gm
    ####node-gm
        http://blog.csdn.net/dreamer2020/article/details/51647885
        npm https://www.npmjs.com/package/gm-reloaded   更详细

