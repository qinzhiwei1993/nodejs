###Express框架
    Express框架是后台的Node框架，所以和jQuery、zepto、yui、bootstarp一样都不是一个东西。
    Express在后台的受欢迎程度，和jQuery一样，就是企业的事实上的标准。

    ###原生的Node开发，会发现很多的问题。比如
        1、呈现静态页面很不方便，需要处理每一个http请求，还要考虑304问题。
        2、路由处理代码不直观清晰，需要写很多的正则表达式和字符串函数。
        3、不能集中经理写业务，要考虑很多其他的东西。

    Express的哲学就是在你的想法和服务器之间充当薄薄得一层。这并不意味着他不够健壮，或者没有足够的有用特性，而是尽量少干预你，让你充分表达自己的思想，同时提供一些有用的东西。

    整体感知，Express框架。
        安装Express框架，就是使用npm命令。 npm install express --save
        --save参数，表示自动修改package.json文件，自动添加依赖项。

        1、Express有着经验的路由能力，正则提取数据能力足够一般工作使用。
        2、Express中静态文件处理，就是一句话的事情。
        3、Express和末班引擎的配置，直观清晰。

        //例子
        var express = require('express');
        var app = express();
        app.get("/", function(req, res){
            res.send('你好');
        })
        //中间件
        app.get('/haha', function(req, res){
            res.send("这是hah页面， 哈哈哈哈");
        app.get(/^\/student\/([\d]{10})$/, function(req, res){//圆括号表示匹配的第一个params
            console.log(req.params);
            res.send('学生信息，学号：' + req.params[0]);
        })
        app.get('/teacher/:gonghao', function(req, res){//  :gonghao 是express自己定义的
            res.send('老师信息，工号：' + req.params['gonghao']);
        })
        app.listen(3000);

    ###静态伺服能力
        app.use(express.static('./static'));

###路由
     用get请求一个网址
        app.get('网址',function(req,res){});
     用post访问一个网址
        app.post('网址',function(req,res){});
     如果想处理一个网址的任何method请求，那么些all
        app.all('网址',function(req,res){});

     这里的网址不分大小写
     所有的参数，？后面的都已经被忽略。锚点#也都被忽略了
     你路由到/a，实际/a?id=2&sex=nan 也能被处理

     ###正则表达式可以被使用。正则表达式中，为止部分用圆括号分组，然后用req.params[0]得到req.params类数组对象
        app.get(/^\/student\/([\d]{10})$/, function(req, res){//圆括号表示匹配的第一个params
            console.log(req.params);
            res.send('学生信息，学号：' + req.params[0]);
        })
      ###冒号更推荐的写法。
        app.get('/student/:id', function(req, res){ // /:username/:oid
            var id = req.params.id;
            var reg = /^[\d]{6}$/;//再用正则判断参数
            if(reg.test(id)){
                res.send(id);
            }else{
                res.send("请检查格式");
            }
        })

      ###表单可以提交给自己，节约了一个网址
        app.get('/', function(req, res){
            res.render('form');
        })
        //post请求
        app.post('/', function(req, res){
            //将数据添加进数据库
            res.send('成功');
        })

      ###适合进行 RESTful 路由设计

###中间件
    //如果我们的get、post回掉函数中，没有next参数，那么就匹配到到第一个路由，不会往下匹配了
    //如果想往下匹配的话，需要执行next()
    //两个路由一样的，匹配到第一个就不会在执行第二个，所以只会打印出 1
    app.get('/', function(req, res, next){//这里有个next参数，如果有两个路由一样，执行了next()方法，就会继续执行下面同样的路由
        console.log("1");
        a++;
        res.send(a.toString());
        next();
    })

    app.get('/', function(req, res){
        console.log('2');
    })

    // 下面两个路由，感觉没有关系：
    //但是实际上冲突了，因为admin可以看做username，login看做id
    app.get('/:username/:id', function(req, res){
        console.log(1);
        res.send('用户信息：'+req.params.username +'id号：'+ req.params.id);
    })

    app.get('/admin/login', function(req, res){
        console.log(2);
        res.send('管理员登录')
    })

    //解决方法一： 交换位置。也就是说，在express中所有的路由（中间件）的顺序至关重要，
        匹配上第一个，就不会往下匹配了。具体的往上写，抽象的往下写
    app.get('/admin/login', function(req, res){
            console.log(2);
            res.send('管理员登录')
        })

    app.get('/:username/:id', function(req, res){
        console.log(1);
        res.send('用户信息：'+req.params.username +'id号：'+ req.params.id);
    })

    //解决方法二： 连续send两次会报错
    app.get('/:username/:id', function(req, res，next){
        var username = req.params.username;
        //检索数据库，如果username不存在，那么next
        if(检索数据库){
            console.log(1);
            res.send('用户信息：'+req.params.username +'id号：'+ req.params.id);
        }else{
            next();
        }
    })

    app.get('/admin/login', function(req, res){
        console.log(2);
        res.send('管理员登录')
    })

    //路由get、post这些东西，就是中间件，中间价讲究顺序，匹配上第一个之后就不会往后匹配了。next函数之后才会继续
        往后 匹配。

###app.use() 也是一个中间件，与get post不同的是，他的网址不是精确匹配的。而是能够有小文件夹扩展的。
    app.use('/admin', function(req, res, next) {
      // GET 'http://www.example.com/admin/new'
      console.log(req.originalUrl); // '/admin/new'
      console.log(req.baseUrl); // '/admin'
      console.log(req.path); // '/new'
    });

    app.use()就给我们增加了一些特定功能的便利场所。
    实际上app.use()的东西，基本上都从第三方能得到。


    ###大多数情况下，渲染内容用res.render()，将根据views中的模板文件进行渲染。
            如果不想使用views文件夹，想自己设置文件夹的名字，那么app.set('views', './haha');
       如果想写一个快速测试页面，当然可以用res.send()。这个函数将根据内容，自动设置
            我们的content-type 和 200状态码。send()只能用一次，和end一样。和end不一样在哪里？能够自动设置MIME类型
       如果想使用不同的状态码，可以
            res.status(404).send('Sorry, we cannot find that');
       如果想使用不同的content-type
            res.set('content-type', 'text/html');


###GET和POST请求

    GET请求的参数在URL中，在原生的NODE中，需要使用url模块识别参数字符串。在express中不需要使用url模块了。可以直接req.query获取？后面的参数

    POST请求在express中不能直接获得，必须使用body-parser模块。使用后将可以用req.body得到参数。但是如果表单中含有文件上传，必须使用formidbale模块。
